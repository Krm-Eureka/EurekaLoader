import os
import re
import time
import logging
from datetime import datetime, timezone
from logging.handlers import BaseRotatingHandler
from Service.config_manager import load_config

# ==============================
#  Handler: ‡∏´‡∏°‡∏∏‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô + ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô ./MonthlyLogging
# ==============================
class MonthlyRotatingFileHandler(BaseRotatingHandler):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå archive
    ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô: <base>-YYYY-MM<ext>  ‡πÄ‡∏ä‡πà‡∏ô Logging-2025-08.log
    """
    def __init__(self, filename, mode="a", encoding=None, delay=False,
                 backupCount=12, utc=False, archive_dir="MonthlyLogging"):
        super().__init__(filename, mode, encoding, delay)
        self.backupCount = backupCount
        self.utc = utc
        self.suffix = "%Y-%m"

        # ‡∏ó‡∏≥ path ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠
        root_dir = os.path.dirname(os.path.abspath(self.baseFilename)) or "."
        self.archive_dir = archive_dir
        if not os.path.isabs(self.archive_dir):
            self.archive_dir = os.path.join(root_dir, self.archive_dir)
        os.makedirs(self.archive_dir, exist_ok=True)

        # ‡πÄ‡∏ß‡∏•‡∏≤ rollover ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ = ‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 00:00:00
        self.rolloverAt = self._compute_next_month_boundary(time.time())

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ rollover ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        try:
            stat = os.stat(self.baseFilename)
            if stat and (not self._is_same_month(stat.st_mtime, time.time())):
                self.doRollover()
        except FileNotFoundError:
            pass

    def _is_same_month(self, t1, t2):
        dt1 = datetime.fromtimestamp(t1)
        dt2 = datetime.fromtimestamp(t2)
        return (dt1.year == dt2.year) and (dt1.month == dt2.month)

    def _compute_next_month_boundary(self, current_time):
        dt = datetime.fromtimestamp(current_time, timezone.utc) if self.utc else datetime.fromtimestamp(current_time)
        year, month = dt.year, dt.month
        next_month = datetime(year + (month == 12), (month % 12) + 1, 1)
        return next_month.timestamp()

    def shouldRollover(self, record):
        return time.time() >= self.rolloverAt

    def doRollover(self):
        if self.stream:
            self.stream.close()
            self.stream = None

        # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏à‡∏ö" -> ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤ archive_dir
        t = self.rolloverAt - 1  # ‡∏¢‡πâ‡∏≠‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        dt = datetime.fromtimestamp(t, timezone.utc) if self.utc else datetime.fromtimestamp(t)
        base_name = os.path.splitext(os.path.basename(self.baseFilename))[0]
        ext = os.path.splitext(self.baseFilename)[1]
        archived_name = f"{base_name}-{dt.strftime(self.suffix)}{ext}"
        dfn = os.path.join(self.archive_dir, archived_name)

        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
        if os.path.exists(dfn):
            try:
                os.remove(dfn)
            except OSError:
                pass

        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ archive
        if os.path.exists(self.baseFilename):
            try:
                os.replace(self.baseFilename, dfn)  # ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤ rename ‡∏ö‡∏ô‡∏ö‡∏≤‡∏á OS
            except OSError:
                # ‡∏ñ‡πâ‡∏≤ cross-device ‡πÉ‡∏´‡πâ copy ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö
                import shutil
                shutil.copy2(self.baseFilename, dfn)
                try:
                    os.remove(self.baseFilename)
                except OSError:
                    pass

        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô backupCount ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô archive_dir
        if self.backupCount > 0:
            for s in self._get_files_to_delete(base_name, ext):
                try:
                    os.remove(os.path.join(self.archive_dir, s))
                except OSError:
                    pass

        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if not self.delay:
            self.stream = self._open()

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        self.rolloverAt = self._compute_next_month_boundary(time.time())

    def _get_files_to_delete(self, base_name, ext):
        """
        ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö <base>-YYYY-MM<ext> ‡πÉ‡∏ô archive_dir ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î backupCount ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        """
        pattern = re.compile(rf"^{re.escape(base_name)}-\d{{4}}-\d{{2}}{re.escape(ext)}$")
        candidates = []
        try:
            for fn in os.listdir(self.archive_dir):
                if pattern.match(fn):
                    candidates.append(fn)
        except FileNotFoundError:
            return []

        candidates.sort()  # YYYY-MM ‡πÄ‡∏£‡∏µ‡∏¢‡∏á lexicographic = ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        num_to_delete = max(0, len(candidates) - self.backupCount)
        return candidates[:num_to_delete]


# ==============================
#  ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
# ==============================
config, base_dir = load_config()
os.makedirs(base_dir, exist_ok=True)

log_format = "%(asctime)s - %(levelname)s - %(message)s"
info_log_path = os.path.join(base_dir, "Logging.log")
debug_log_path = os.path.join(base_dir, "DEBUGLog.log")
archive_dir = os.path.join(base_dir, "MonthlyLogging")  # <- ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

# INFO: ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
info_handler = MonthlyRotatingFileHandler(
    info_log_path, mode="a", encoding="utf-8", backupCount=12, archive_dir=archive_dir
)
info_handler.setLevel(logging.INFO)
info_handler.setFormatter(logging.Formatter(log_format))

# DEBUG: ‡∏´‡∏°‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
debug_handler = MonthlyRotatingFileHandler(
    debug_log_path, mode="a", encoding="utf-8", backupCount=6, archive_dir=archive_dir
)
debug_handler.setLevel(logging.DEBUG)
debug_handler.setFormatter(logging.Formatter(log_format))

# Console
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter(log_format))

# Root logger
root_logger = logging.getLogger()
root_logger.handlers.clear()
root_logger.setLevel(logging.DEBUG)
root_logger.addHandler(info_handler)
root_logger.addHandler(debug_handler)
root_logger.addHandler(console_handler)

logging.info("üî• Logging system initialized (monthly rotation to ./MonthlyLogging).")
logging.debug("üêû Debug log ready (monthly rotation).")

# ‡∏•‡∏î noise ‡∏Ç‡∏≠‡∏á matplotlib
logging.getLogger("matplotlib.font_manager").setLevel(logging.INFO)
logging.debug("üêû Matplotlib font manager debug log disabled.")
print("üìÇ Log file (INFO):", info_log_path)



# ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö rollover ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
info_handler.doRollover()
debug_handler.doRollover()

logging.info("üîÅ Forced monthly rollover (manual)")
print("üìÇ Archive dir:", archive_dir)